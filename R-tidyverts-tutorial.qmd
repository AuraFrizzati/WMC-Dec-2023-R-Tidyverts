---
title: "R-tidyverts-tutorial"
author: "Aura Frizzati - NHS Wales Executive | Digital Intelligence)"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
   toc: true
   toc_float: 
   collapsed: false
   toc_depth: 3
   number_sections: true
   theme: yeti
execute: 
  warning: false
  message: false
---

```{r}
#| code-fold: true
#| warning: false
#| message: false

## load relevant libraries

## from tidyverse
library(dplyr)    ## data wrangling
library(stringr)  ## handling of strings
library(purrr)    ## functional programming
library(readr)    ## r objects' import/export
library(ggplot2)  ## r plotting

## from tidyverts
library(tsibble)
library(fable)
library(fabletools)
library(feasts)

## others
library(statswalesr) ## import data from StatsWales
library(plotly) ## interactive ggplots
library(gt) ## html table formatting
library(renv) ## create r environment for sharing

options(scipen = 999) ## remove scientific notation
```

## 1. Intro: Tidyverts packages

They are "tidy" tools created to handle time series ([tidyverts.org](https://tidyverts.org/)). They are based on and extend the [tidyverse](https://www.tidyverse.org/) collection of packages.

![](img/tidiverts_family.JPG)

*Add something about what time series are and other packages available in R to handle them*

use of new tibble pipe operator <https://www.rforecology.com/post/how-to-use-pipes/>

## 2. Data retrieval

We will trial some of them on data retrieved from [StatsWales](https://statswales.gov.wales/Catalogue).

We will retrieve "[**`Number of attendances in NHS Wales emergency departments by age band, sex and site`**](https://statswales.gov.wales/Catalogue/Health-and-Social-Care/NHS-Hospital-Waiting-Times/emergency-department/emergencyattendances-by-age-sex-site)".

These are aggregated monthly attendances to Emergency Dept (ED), partitioned by:

-   Local Health Board & Hospital Site
-   Patient Sex
-   Patient Age group.

We can directly extract the whole dataset in R using the `statswalesr` [package](https://github.com/jamie-ralph/statswalesr), using the Open Data table code (HLTH0037)

```{r}
#| eval: false

## **WARNING: this step might take some time**
HLTH0037_data_raw <-
  statswalesr::statswales_get_dataset("HLTH0037")

HLTH0037_metadata <-
  statswalesr::statswales_get_metadata("HLTH0037", language = "english")

```

## 3. Data cleaning

-   Removed redundant columns
-   Modified columns' names
-   Attached Local Health Boards' names to geographical codes (lookup retrieved from Gov Wales [Table 9](https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fwww.gov.wales%2Fsites%2Fdefault%2Ffiles%2Fstatistics-and-research%2F2021-09%2Fsensory-health-eye-care-and-hearing-statistics-april-2019-march-2021-tables-221.ods&wdOrigin=BROWSELINK))
-   Aggregated some of the age groups

check ABUHB dip

```{r}
#| eval: false
#| code-fold: true
write.csv(HLTH0037_data_raw, "data/HLTH0037_data_raw.csv", row.names = F)
write.csv(HLTH0037_metadata, "data/HLTH0037_metadata.csv", row.names = F)
```

```{r}
#| eval: false
#| code-fold: true
#| results: hide

## [1] re-import the data saved locally
HLTH0037_data_raw <- read.csv("data/HLTH0037_data_raw.csv")
HLTH0037_metadata <- read.csv("data/HLTH0037_metadata.csv")
#names(HLTH0037_data_raw)

## [2] Select only relevant folumns and rename them
HLTH0037_data <-
  HLTH0037_data_raw |>
  dplyr::select(
    Date_ItemName_ENG,       ## Time as Month&Year
    Data,                    ## Number of ED Attendances
    Hospital_ItemName_ENG,   ## Hospital name
    Hospital_Hierarchy,      ## Local Health Board code
    Age_ItemName_ENG,        ## Age groups
    Sex_ItemName_ENG         ## Sex groups
    ) |>
  ## rename the columns
  dplyr::rename(
    MonthYear = Date_ItemName_ENG,
    Attendances = Data,
    Hospital = Hospital_ItemName_ENG,
    LHB_code = Hospital_Hierarchy,
    Age_band = Age_ItemName_ENG,
    Sex = Sex_ItemName_ENG
    ) 

# Check the filtered data
head(HLTH0037_data) |> 
  gt::gt() |> ## transforming the data into a table with specified formatting
  gt::tab_options(table.font.size = 12)


##  [3] create the lookup for LHB names/codes and attach the LHB names to ED data
NHSWalesOrg_lookup <-
  data.frame(
    "Organisation" = c("Betsi Cadwaladr", 
                       "Powys Teaching", 
                       "Hywel Dda", 
                       "Swansea Bay",
                       "Abertawe Bro Morgannwg", 
                       "Cwm Taf Morgannwg",
                       "Cwm Taf", 
                       "Aneurin Bevan",
                       "Cardiff & Vale", 
                       "Wales"),
    
    "Geographical_code" = c("W11000023", 
                            "W11000024",
                            "W11000025", 
                            "W11000031",
                            "W11000026", 
                            "W11000030",
                            "W11000027", 
                            "W11000028",
                            "W11000029", 
                            "W92000004"))

NHSWalesOrg_lookup |> 
  gt::gt() |> 
  gt::tab_options(table.font.size = 12)


HLTH0037_data_v2 <-
  HLTH0037_data |>
  dplyr::left_join(
    NHSWalesOrg_lookup,
    by = c("LHB_code" = "Geographical_code"))

head(HLTH0037_data_v2) |> 
  gt::gt() |> 
  gt::tab_options(table.font.size = 12)

## [4] Look at the summary of the variables in the table
unique_values<-
  HLTH0037_data_v2 |> 
  dplyr::select(Organisation,Age_band,Sex,Hospital,MonthYear) |>
  purrr::map(
  ~ stringr::str_c(unique(.x), ## distinct values/column
         collapse = ",")) |>
  dplyr::bind_rows() |> 
  tidyr::gather(
    key = `Col name`, value = `Unique values`) 

N_unique_values<-
  HLTH0037_data_v2 |>
  dplyr::select(Organisation,Age_band,Sex,Hospital,MonthYear) |>
  purrr::map(~length(unique(.x)))|> ## n distinct values/column
  dplyr::bind_rows() |>
  tidyr::gather(
    key = `Col name`, value = `N unique values`)

N_missing_values<-
  HLTH0037_data_v2 |>
  dplyr::select(Organisation,Age_band,Sex,Hospital,MonthYear) |>
  purrr::map(~sum(is.na(.x)))|> ## n missing values/column
  dplyr::bind_rows() |>
  tidyr::gather(
    key = `Col name`, value = `N missing values`) 

class_variables <-
  HLTH0037_data_v2 |>
  dplyr::select(Organisation,Age_band,Sex,Hospital,MonthYear) |>
  purrr::map(~class(.x))|> ## extract variable class/column
  dplyr::bind_rows() |>
  tidyr::gather(
    key = `Col name`, value = Class) 

cbind(
  unique_values,
  N_unique_values|> dplyr::select(`N unique values`),
  N_missing_values|> dplyr::select(`N missing values`),
  class_variables|> dplyr::select(Class)
  ) |>
  gt::gt() |>
  gt::tab_options(table.font.size = 12) |>
  gt::cols_align(align = "left")
```

```{r}
#| eval: false
#| code-fold: true

## [5] Final changes: aggregate age groups, convert time column from character into date format (monthly), shorten LHB names, group Attendances counts by all variables' combinations (MonthYear x Hospital X Age group X Sex) 

## **WARNING: this step might take some time**
HLTH0037_data_v3 <-
  HLTH0037_data_v2 |>
  dplyr::mutate(

    ## Aggregating age groups within Age_band
    Age_band =
      dplyr::case_when(
        Age_band %in% c("0-4","5-17") ~ "0-17",
        Age_band %in% c("18-24","25-29","30-34","35-39",
                        "40-44","45-49","50-54","55-59",
                        "60-64","65-69") ~ "18-69",
        Age_band %in% c("70-74","75-79","80-84","85 and over") ~ "70+",
        TRUE ~ Age_band),

    ## Converting MonthYear column from character to date format
    MonthYear = tsibble::yearmonth(MonthYear),
    
    ## Convert LHB full names into shorter ones
    LHB = dplyr::case_when(
      Organisation == "Aneurin Bevan" ~ "AB UHB",
      Organisation == "Cardiff & Vale" ~ "CAV UHB",
      Organisation == "Abertawe Bro Morgannwg" ~ "ABM",
      Organisation == "Powys Teaching" ~ "PT HB",
      Organisation == "Betsi Cadwaladr" ~ "BC UHB",
      Organisation == "Cwm Taf" ~ "Cwm Taf",
      Organisation == "Hywel Dda" ~ "HD UHB",
      Organisation == "Cwm Taf Morgannwg" ~ "CTM UHB",
      Organisation == "Swansea Bay" ~ "SB UHB"
      
    )

    ) |>
  dplyr::group_by_at(vars(-Attendances)) |>
  dplyr::summarise(Attendances = sum(Attendances)) |>
  dplyr::ungroup()

readr::write_rds(HLTH0037_data_v3, "data/HLTH0037_data_v3.rds")
```

```{r}
## import cleaned data
HLTH0037_data_v3 <- 
  readr::read_rds("data/HLTH0037_data_v3.rds")

head(HLTH0037_data_v3) |> 
  gt::gt() |>
  gt::tab_options(table.font.size = 12) |>
  gt::tab_style(
    style =  gt::cell_text(weight = "bold"),
    locations =  gt::cells_column_labels()
        ) 
```

## 4. Conversion into a `tsibble`

Converting the dataframe into `tsibble` format

note: `index` must be in a date-type format (converted from character variable in raw data to MonthYear using `tsibble::yearmonth()`)

```{r}
HLTH0037_data_ts <-
  HLTH0037_data_v3 |>
  tsibble::as_tsibble(
    
    ## index = time column in the table
    index = MonthYear, 
    key = c(Hospital,Sex,Age_band, LHB)
  )
HLTH0037_data_ts
```

A tsibble with:

-   18,525 rows x 8 columns
-   time resolution \[1M\] = Monthly data points
-   4 keys (=grouping variables) (411 combinations/time series)

## 5. Time series plotting

### 5.1 Time lines

Use function `fabletools::autoplot()`

All Wales aggregated data

```{r}
AllWales_ts<-
  HLTH0037_data_ts |>
  dplyr::summarise(Attendances = sum(Attendances))

AllWales_ts

AllWales_ts |>
  fabletools::autoplot(.vars = Attendances) +
  labs(title = "All Wales ED Attendances")
```

Data aggregated by keys

```{r}
## by LHB
ByLHB_ts <-
  HLTH0037_data_ts |>
  dplyr::group_by(LHB) |>
  dplyr::summarise(Attendances = sum(Attendances)) 

ByLHB_ts |> 
  fabletools::autoplot(.vars = Attendances) +
  ggplot2::labs(title = "ED Attendances by LHB") + 
  theme(legend.position="bottom")
```

```{r}
## by Age group
ByAge_ts <-
  HLTH0037_data_ts |>
  dplyr::group_by(Age_band) |>
  dplyr::summarise(Attendances = sum(Attendances)) 

ByAge_ts |> 
  fabletools::autoplot(.vars = Attendances)+
  ggplot2::labs(title = "ED Attendances by Age Band") + 
  theme(legend.position="bottom")
```

```{r}
## by Sex
BySex_ts <-
  HLTH0037_data_ts |>
  dplyr::group_by(Sex) |>
  dplyr::summarise(Attendances = sum(Attendances))

BySex_ts |> 
  fabletools::autoplot(.vars = Attendances)+
  labs(title = "ED Attendances by Sex") + 
  theme(legend.position="bottom")
  
```

```{r}
HLTH0037_data_ts |>
  dplyr::filter(Organisation == "Powys Teaching") |>
  dplyr::group_by(Hospital) |>
  dplyr::summarise(Attendances = sum(Attendances)) |> 
  fabletools::autoplot(.vars = Attendances) + 
  labs(title = "ED Attendances by Hospital (PT HB)")
```

```{r}
HLTH0037_data_ts |>
  dplyr::filter(Organisation == "Powys Teaching") |>
  dplyr::group_by(Hospital) |>
  dplyr::summarise(Attendances = sum(Attendances)) |> 
  fabletools::autoplot(.vars = Attendances) +
  labs(title = "ED Attendances by Hospital (PT HB)") + 
  facet_wrap(vars(Hospital), nrow = 4, scales = "free_y")
```

### 5.2 Interactive Time lines

#### **ggplotly**

```{r}
plotly::ggplotly(ByLHB_ts |> 
  fabletools::autoplot(.vars = Attendances) +
    labs(title = "ED Attendances by LHB"))
```

#### **dygraphs**

<https://rstudio.github.io/dygraphs/index.html>

```{r}
#|  warning: false
#|  message: false

library(dygraphs) # interactive time series
library(xts) # create time series objects (class xs)

dygraphs::dygraph(
  tsbox::ts_xts(ByLHB_ts), ## convert tsibble object into xts
  main='ED Attendances by LHB',
  y = "Monthly ED Attendances",
  x = "Month Year")|>
  dyRangeSelector()
```

### 5.2 Seasonal plots

standard seasonal plot: `feasts::gg_season(period)`

```{r}
AllWales_ts |>
  feasts::gg_season(y = Attendances, period = "year") +
    labs(title = "All Wales ED Attendances - Seasonal plot")
```

"subseries" seasonal plot: `feasts::gg_season(period)`

```{r}
AllWales_ts |>
  feasts::gg_subseries(y = Attendances, period = "year") +
    labs(title = "All Wales ED Attendances - Seasonal subseries plot")
```

## 5. Time series decomposition

We run an **STL** (**Seasonal and Trend decomposition using Loess**) model using a formula:

`MODEL(y ~ predictors)`

The output is a **dable** (= **decomposition table**)

```{r}
STLdecomp_AllWales_ts <-
  AllWales_ts |>
  fabletools::model(
    stl_model = feasts::STL(
      Attendances ~ trend(window = 21) + season(window = 13))
  )

STLdecomp_AllWales_ts |>
  fabletools::components()
```

```{r}
STLdecomp_AllWales_ts |>
  fabletools::components() |>
  fabletools::autoplot()
```

## 6. Forecasting

### 6.1 Create Training and Validation periods

-   **Training set**: from July 2021 to July 2023 (2 years)

-   **Validation set**: from August 2023 to September 2023 (2 months) --\> download updated data and extend to October

```{r}
AllWales_ts <-
  AllWales_ts |>
  dplyr::mutate(
    Type = dplyr::case_when(
      
      ## Define Training Period
      MonthYear >= tsibble::yearmonth("2021-07-01") & 
        MonthYear <= tsibble::yearmonth("2023-07-01") ~ "Training",
      
      ## Define Validation Period
      MonthYear > tsibble::yearmonth("2023-07-01") ~ "Validation",
      
      ## Data points before Training
      TRUE ~ "Pre-training"
      
    )
  )
  
```

```{r}
AllWales_ts |>
  filter(Type %in% c("Training","Validation")) |>
  ggplot(aes(x = MonthYear, y = Attendances, colour = Type))+
  geom_line() +
  labs(title = "All Wales ED: Split Training/Validation")
```

### 6.2 Fit a model to the Training data

The fable framework offers a [range of popular forecasting models](https://fable.tidyverts.org/reference/index.html), including:

-   Benchmark models (`MEAN`, `NAIVE`, `SNAIVE`)
-   ARIMA
-   ETS
-   Regression Models (`TSLM`)
-   Neural Networks
-   ...
-   Interface for external libraries: Facebook [Prophet](https://cran.r-project.org/web/packages/fable.prophet/vignettes/intro.html) and [tscount](https://github.com/mitchelloharawild/fable.tscount) (for count time series)

Fitting benchmark models.

Same syntax as when we fitted STL:

`fabletools::model(MODEL_NAME(y ~ predictors))`

This creates a list of **mables** (= **model tables**)

```{r}
AllWales_benchmarks <-
  AllWales_ts |>
  ## select data only from the Training period to fit the models
  filter(Type == "Training")|>
  fabletools::model(
    mean_model = fable::MEAN(Attendances),
    naive_model = fable::NAIVE(Attendances),
    snaive_model = fable::SNAIVE(Attendances ~ lag("year"))
  )

AllWales_benchmarks
```

Check model's parameter(s), residuals' variance, etc ...

```{r}
AllWales_benchmarks |> 
  dplyr::select(mean_model)|> 
  fabletools::report()
```

Access to

models' fitted values and residuals

```{r}
AllWales_benchmarks |> 
  fabletools::augment()
```

Plot fitted values against historical ones

```{r}
#| warning: false
AllWales_benchmarks |> 
  fabletools::augment() |>
  fabletools::autoplot(.vars = .fitted, lty = 5, size =0.7) +
  autolayer(
    AllWales_ts |>
      filter(Type == "Training"),
    .vars = Attendances, size =0.6) + 
  theme(legend.position="bottom") +
  labs(title = "All Wales ED: historical vs fitted benchmark values")
  
```

Plot residual diagnostic plots with `feasts::gg_tsresiduals()`

```{r}
#| warning: false
AllWales_benchmarks |> 
  select(naive_model) |>
  feasts::gg_tsresiduals(type = "response")
```

### 6.3 Forecast

Use `fabletools::forecast(h = horizon)` to obtain a **fable** (= **forecast table**) object with **point** and **distribution forecasts** for each model in the mable

```{r}
AllWales_benchmarks_fct <-
  AllWales_benchmarks |>
  fabletools::forecast(h=2) ## h = horizon, 2 months

AllWales_benchmarks_fct
```

Plot all models' **point forecasts** with **prediction intervals**

```{r}
AllWales_benchmarks_fct |>
  fabletools::autoplot(level = c(80,95)) + # level = prediction intervals
  autolayer(
    AllWales_ts |> filter(Type %in% c("Training","Validation")),
    .vars = Attendances) +
  theme(legend.position="bottom") +
  labs(title = "All Wales ED: forecasts benchmark models")+ 
  facet_wrap(vars(.model), nrow = 3, scales = "free_y")
```

**Measure of point forecast accuracy**

```{r}
AllWales_benchmarks_fct |>
  fabletools::accuracy(AllWales_ts)
```
